snippet     :f
options     head
  ${1:#:method_name}: function (${2:#:attribute}) {
    ${0:TARGET}
  }

snippet     function
alias       func
abbr        function func (args) { ... }
options     word
  function ${1:#:function_name} (${2:#:argument}) {
    ${0:TARGET}
  }

snippet     function2
alias       func2
abbr        function func (args) { ... }
options     head
  function ${1:function_name} (${2:argument}) {
    ${0:TARGET}
  }

snippet     proto
options     head
  ${1:#:class_name}.prototype.${2:#:method_name} = function (${3:#:first_argument}) {
    ${0:TARGET}
  }

snippet     f
options     word
  function (${1}) { ${0:TARGET} }

snippet     if
options     head
  if (${1:true}) {
    ${0:TARGET}
  }

snippet     if-else
abbr        ife
options     head
  if (${1:#:condition}) {
    ${2:TARGET}
  } else {
    ${3}
  }

snippet     for
options     head
  for (let ${1:i} = 0; $1 < ${2:#:Things}; ++$1) {
    ${0:TARGET}
  }

snippet     forlength
options     head
  for (let ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
    ${0:TARGET}
  }

snippet     forin
options     head
  for (const ${1:i} in ${2:#:Things}) {
    ${0:TARGET}
  }

snippet     while
options     head
  while (${1:true}) {
    ${0:TARGET}
  }

snippet     switch
options     head
  switch (${1:#:var}) {
    case ${2:#:val}:
      ${0:TARGET}
      break
  }

snippet     case
options     head
	case ${1:value}:
	  ${0:TARGET}
	  break

snippet     try
options     head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  }

snippet     try_finally
options     head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  } finally {
    ${4}
  }

snippet     key-value
alias       kv
abbr        :,
options     word
  ${1:#:value_name}: ${0:#:value},

#snippet key
#options word
#  ${1:#:key}: "${2:#:value}"}${3:, }

snippet     setTimeout-function
options     head
  setTimeout(function () { ${0} }, ${1:10});

snippet     debugger
alias       db
options     head
  debugger

snippet     console-log
alias       cl
options     head
  console.log(${0:TARGET})

snippet     console-trace
alias       ct
options     head
  console.trace()

snippet     console-error
alias       ce
options     head
  console.error(${0:TARGET})

snippet     console-warn
alias       cw
options     head
  console.warn(${0:TARGET})

snippet     console-info
alias       ci
options     head
  console.info(${0:TARGET})

snippet     console-time
alias       cti
options     head
  console.time(${0:#:label})

snippet     console-timeend
alias       cte
options     head
  console.timeEnd(${0:#:label})

snippet     iife
options     head
  (function (${1}) {
    'use strict'
    ${0:TARGET}
  })(${2})

snippet     js
options     head
  JSON.stringify(${1:TARGET}, null, 2)

snippet     jsc
options     head
  console.log(JSON.stringify(${1:TARGET}, null, 2))

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
    constructor (${2:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     class-extends
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SuperClass} {
    constructor (${3:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     static
options     head
  static ${1:#:NAME} (${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     set
options     head
  set ${1:#:NAME} (${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     get
options     head
  get ${1:#:NAME} () {
    ${0:TARGET}
  }

snippet     import
abbr        import { member, ... } from "module-name"
options     head
  import { ${1:MEMBERS} } from '${0:TARGET}'

snippet     import-default
abbr        import defaultMember from "module-name"
options     head
  import ${1:defaultMember} from '${0:TARGET}'

snippet     import-all
abbr        import * as NAME from "..."
options     head
  import * as ${1:NAME} from '${0:TARGET}'

snippet     import-default-member
abbr        import defaultMember, { member, ... } from "module-name"
options     head
  import ${1:defaultMember}, { ${2:MEMBERS} } from '${0:TARGET}'

# nodejs snippets
snippet     require
alias       rqi
options     head
  const ${1:#:name} = require('${0:TARGET}')

snippet     gplv3
alias       gpl
abbr        GNU General Public License Version 3
options     head
  /**
   * Copyright (c) ${1:`strftime("%Y")`}, ${0:TARGET}.
   *
   * This file is part of ${2:project}.
   *
   * $2 is free software: you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as
   * published by the Free Software Foundation, either version 3 of
   * the License, or any later version.
   *
   * $2 is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public
   * License along with $2.  If not, see <https://www.gnu.org/licenses/>.
   */

snippet     agpl
abbr        GNU Affero General Public License Version 3
options     head
  /**
   * Copyright (c) ${1:`strftime("%Y")`}, ${0:TARGET}.
   *
   * This file is part of ${2:project}.
   *
   * $2 is free software: you can redistribute it and/or modify
   * it under the terms of the GNU Affero General Public License as
   * published by the Free Software Foundation, either version 3 of
   * the License, or any later version.
   *
   * $2 is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU Affero General Public License for more details.
   *
   * You should have received a copy of the GNU Affero General Public
   * License along with $2.  If not, see <https://www.gnu.org/licenses/>.
   */

snippet     mit
abbr        MIT License
options     head
  /**
   * Copyright ${1:`strftime("%Y")`} ${0:TARGET}
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files
   * (the "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to the
   * following conditions:
   *
   * The above copyright notice and this permission notice shall be included
   * in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
   * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
   * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
   * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   */
